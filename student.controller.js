
const { Student } = require('./student.schema');

// Create a new Student
//change all the APIs to functions
const register = async (req, res) => {
    try {
        const { firstName, lastName, age, course, level, email } = req.body;

        //If someone doesn't fill any of the required fields
        if (!firstName ||!lastName ||!course ||!level ||!email) {
            return res.status (400).json({message: 'Please Fill All Required Fields'});
        }
        const existingStudent = await Student.findOne({email});
        if (existingStudent) {
          return res.status (409).json ({message: 'Student already exists',});
        }

        //to hash the password (encrypt)
        //const hashedPassword = await bcrypt.hash(password, saltRounds);
        const student = new Student({ firstName, lastName, age, course, level, email, password: hashedPassword });
        await student.save();
        
        res.status(201).json({ message: 'Student created successfully', student });
    } catch (error) {
        console.error(' Error in register:', error); // Log full error
        res.status(500).json({ message: 'Error creating student', error: error.message });
    }
};

// Fetch all students
const getStudents = async (req, res) => {
    try {
        const students = await Student.find();

        if (students.length === 0) {
            return res.status(404).json({ message: 'No students found' });
        }

        return res.status(200).json({ students, length: students.length });
    } catch (error) {
        return res.status(500).json({ message: 'Issues fetching students', error });
    }
};


// Get a student by id
const getStudentsById = async (req, res) => {

    try{
    const { id } = req.params;
    const student = await Student.findById(id); // finding a student by the unique id generated by MongoDB
    
    if (!student) {
        return res.status (404).json ({message: 'Student not found,'});
    }
    res.status(200).json({ student });
} catch (error){
    res.status (500).json ({message: 'Error retrieving students by Id', error});
}
};

// Update a student by id 
//to test on thunder client use: http://localhost(port)/api/student/update-students/ the unique id generated
const updateStudentsById = async (req, res) => {
    try{
    const { id } = req.params;
    const { firstName, lastName, age, course, level, email: newEmail } = req.body;

    const updatedStudent = await Student.findByIdAndUpdate( // to find and update by Id
        id,
        { firstName, lastName, age, course, level, email: newEmail },
        { new: true }
    );

    if (!updatedStudent){
       return res.status(404).json ({message: 'Student not found'});
    }
    res.status(200).json({
        message: 'Student details updated successfully',
        updatedStudent
    });
}catch (error) {
    res.status(500).json ({message: 'Issues updating student details'});
}
};

const getByEmail =async (req, res) => {
    const {email} = req.query;
    try {
    if (!email) {
        return res.status(400).json ({message: 'email query parameter is required' });
    }
        const student = await Student.findOne({email});
        if (!student) {
            return res.status (404).json ({message: 'No Student Email Found'});
        }
        return res.status(200).json ({message:'Email Retrieved Successfully', student});
    }
    catch (error) {
        res.status(500).json({message: 'cannot retrieve data by email', error});
    }
};

// Delete a student by id
const deleteStudentsById = async (req, res) => {
    const { id } = req.params;
    try {
    const deletedStudent = await Student.findByIdAndDelete(id); // to find and delete by Id

    if(!deletedStudent) {
       return res.status(404).json ({message: 'Cannot Delete. Student not found',});
    }

    res.status(200).json({
        message: 'Student details deleted successfully',
        deletedStudent
    });
       }catch (error) {
        res.status(500).json({message: 'Cannot be deleted', error});
    }
};

const searchStudents = async (req, res) => {
    const {query} = req.query;
    try {
        if (!query) {
            return res.status(400).json ({message: 'Search query is required'});
        }
        const regex = new RegExp(query, 'i'); //this is so that the query will be case insensitive
        const students= await Student.find({
            $or: [
               {firstName: {$regex: regex}},
               {lastName: {$regex: regex}},
               {email: {$regex: regex}}
            ]
        });

        if (students.length ===0) {
            return res.status(400).json ({ message: 'No student(s) found'});
        }
        return res.status (200).json ({students});
        } catch (error) {
        res.status(500).json({message: 'Error finding student', error});
    }
}; //search by lastname, firstname or email without case sensitivity

const countStudents = async (req, res) =>{
   try{
    const count = await Student.countDocuments();
    res.status(200).json ({message: 'Total Number of Students', count});
   } catch (error){
    res.status (500).json ({message: 'Error counting students', error});
   }

}; 

module.exports = {
  register,
  getStudents,
  getStudentsById,
  updateStudentsById,
  deleteStudentsById,
  searchStudents,
  getByEmail,
  countStudents,
};